[{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/CLAUDE.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"blockr.dplyr Developer Guide","text":"developer documentation dev/ folder: dev/blocks-core-guide.md - Universal block development concepts (start ) dev/ui-guidelines.md - UI patterns responsive layouts dev/dplyr-technical-guide.md - Technical patterns specific blockr.dplyr","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/CLAUDE.html","id":"block-pattern","dir":"","previous_headings":"Quick Reference","what":"Block Pattern","title":"blockr.dplyr Developer Guide","text":"","code":"new_my_block <- function(param = default, ...) {   ui <- function(id) {     tagList(       block_responsive_css(),       div(class = \"block-container\",         div(class = \"block-form-grid\",           div(class = \"block-section\",             tags$h4(\"Options\"),             div(class = \"block-section-grid\",               div(class = \"block-input-wrapper\",                 selectInput(NS(id, \"param\"), \"Label\", choices = param, selected = param)               )             )           )         )       )     )   }    server <- function(id, data) {     moduleServer(id, function(input, output, session) {       r_param <- reactiveVal(param)       observeEvent(input$param, r_param(input$param))        observeEvent(colnames(data()), {         updateSelectInput(session, \"param\", choices = colnames(data()), selected = r_param())       })        list(         expr = reactive({           req(r_param())           # Build dplyr expression         }),         state = list(param = r_param)       )     })   }    new_transform_block(server, ui, class = \"my_block\", ...) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/CLAUDE.html","id":"critical-rules","dir":"","previous_headings":"Quick Reference","what":"Critical Rules","title":"blockr.dplyr Developer Guide","text":"Initialize UI inputs constructor parameters - Never use empty choices = character() Use req() validation - Framework handles errors automatically Static UI inputs - Use conditionalPanel(), renderUI() inputs constructor params state - State names must match constructor parameter names exactly","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/CLAUDE.html","id":"development-workflow","dir":"","previous_headings":"Quick Reference","what":"Development Workflow","title":"blockr.dplyr Developer Guide","text":"Read dev/blocks-core-guide.md Implement following pattern Run devtools::document() adding @importFrom Validate blockr-validate-blocks agent Format air format .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/CLAUDE.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"blockr.dplyr Developer Guide","text":"blockr.core vignettes Example blocks - filter.R, mutate.R, select.R dplyr documentation","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"blockr.dplyr provides interactive blocks data wrangling. block offers user interface specific data transformation task. Blocks can connected together create data transformation pipelines.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"select-block","dir":"Articles","previous_headings":"","what":"Select Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"select block chooses columns keep dataset. Use column selector pick columns want. can select multiple columns reorder dragging. order selection determines column order output. block includes “distinct” option. enabled, duplicate rows removed result, keeping unique combinations selected columns. Select block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"expression-filter-block","dir":"Articles","previous_headings":"","what":"Expression Filter Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"expression filter block keeps rows meet specific conditions. Enter logical expressions using column names comparison operators. block designed users want write filter conditions expressions. Supported operators include >, <, ==, !=, >=, <= comparisons, %% checking membership set values. Combine multiple conditions using & () require conditions true, | () require least one condition true. expression editor provides syntax highlighting validates expressions. Examples: mpg > 20, cyl == 4 | cyl == 6, hp > 100 & wt < 3. prefer filter selecting values dropdowns rather writing expressions, use value filter block instead. value filter block particularly useful categorical data want pick specific values visually. Filter block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"value-filter-block","dir":"Articles","previous_headings":"","what":"Value Filter Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"value filter block filters rows selecting values dropdown lists. provides point--click interface require writing expressions. Use block want visually select values include exclude, especially categorical columns. filter condition, select column dropdown. interface displays unique values column. Select one values filter . Choose “include” mode (keep rows selected values) “exclude” mode (remove rows selected values). particularly useful want see values exist column deciding filter. Add multiple conditions using “+” button. condition can combined previous one using (conditions must true) (least one condition must true) logic. “preserve order” option maintains order selected values output. complex filter conditions using comparisons calculations, use expression filter block instead. expression filter block allows write expressions like mpg > 20 hp / wt > 50 expressed value selection. Value filter block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"arrange-block","dir":"Articles","previous_headings":"","what":"Arrange Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"arrange block sorts rows column values. Select one columns sort , column ascending descending control. sorting multiple columns, order matters. first column primary sort key. Rows value first column sorted second column, . Use drag handles reorder sort columns. Add columns using “+” button remove using “-” button. Toggle ascending descending order column independently. Arrange block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"slice-block","dir":"Articles","previous_headings":"","what":"Slice Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"slice block selects specific rows based different criteria. Choose six slice types: head (first rows), tail (last rows), min (rows smallest values), max (rows largest values), sample (random selection), custom (specific positions). head tail types, specify number rows using n (count) prop (proportion 0 1). min max types, select order_by column enable with_ties want include rows tied values. sample type, optionally select weight_by column weighted sampling enable replace sampling replacement. custom type accepts rows expression like “1:5” “c(1, 3, 5, 10)”. slice types support grouping via parameter, performs slice operation within group separately. Slice block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"mutate-block","dir":"Articles","previous_headings":"","what":"Mutate Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"mutate block creates new columns modifies existing ones. Add multiple expressions, creating updating column. expression consists column name expression calculates value. Use mathematical operators (+, -, *, /, ^) functions (sqrt(), log(), round(), etc.) expressions. Reference existing columns name. can also use conditional logic ifelse() dplyr::case_when(). Expression order matters: later expressions can reference columns created earlier expressions mutate block. parameter allows grouping, making column references operate within group. Add expressions “+” button remove “-” button. Mutate block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"rename-block","dir":"Articles","previous_headings":"","what":"Rename Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"rename block changes column names. rename operation maps new name existing column. interface shows mapping “new_name ← old_name” visual arrow indicator. Select existing column dropdown ensure valid column names. Type new name text field. Add multiple renames using “+” button rename several columns . Remove rename operation “-” button. block validates don’t rename column twice ensures column names don’t conflict existing names. Rename block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"summarize-block","dir":"Articles","previous_headings":"","what":"Summarize Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"summarize block calculates summary statistics. Add multiple summary expressions, creating new column output. expression consists column name aggregation expression. Common aggregation functions include mean(), sum(), min(), max(), n() (count rows), n_distinct() (count unique values), median(), sd(). Use parameter group data summarizing. grouping enabled, statistics calculated separately group. unpack option controls functions return data frames handled. enabled, data frame results unpacked separate columns. useful helpers like across() can apply functions multiple columns . example, across(c(hp, wt), mean) unpacking creates separate columns mean. Add expressions “+” button. interface validates expressions shows errors aggregation invalid. Summarize block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"join-block","dir":"Articles","previous_headings":"","what":"Join Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"join block combines two datasets based matching values specified columns. Select six join types determine rows kept result. Join types: left_join keeps rows left dataset matching rows right; right_join keeps rows right dataset matching rows left; inner_join keeps rows match datasets; full_join keeps rows datasets; semi_join filters left dataset rows match right; anti_join filters left dataset rows match right. join key interface supports -name joins (columns identical names) different-name joins (matching columns different names dataset). Add multiple join keys match multiple columns simultaneously. different-name joins, specify column left dataset matches column right dataset. Join block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"bind-rows-block","dir":"Articles","previous_headings":"","what":"Bind Rows Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"bind rows block stacks datasets vertically matching column names. Rows input dataset combined single output dataset. Columns matched name. datasets different columns, result includes columns datasets. Missing columns filled NA values. order columns output follows order appear across input datasets. id_name option adds identifier column tracks source dataset row came . useful combining data multiple sources need maintain provenance. Enable option specify column name store source identifier. Bind rows block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"bind-columns-block","dir":"Articles","previous_headings":"","what":"Bind Columns Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"bind columns block combines datasets side--side horizontally. Columns input dataset placed next output. input datasets must exactly number rows. rows combined position: first row dataset forms first row output, second rows form second row output, . datasets columns name, suffix option controls handle duplicates. Specify suffixes add duplicate column names dataset. example, suffixes c(\"_x\", \"_y\") rename duplicate column “id” “id_x” “id_y”. Bind columns block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"pivot-longer-block","dir":"Articles","previous_headings":"","what":"Pivot Longer Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"pivot longer block reshapes data wide long format using tidyr::pivot_longer(). Use column names represent values variable rather variables . Select columns pivot. columns transformed two new columns: one containing original column names (names_to parameter, default “name”) another containing values (values_to parameter, default “value”). Unselected columns remain identifiers. names_prefix option removes common prefixes column names. values_drop_na option removes rows value NA. useful reshaping time series data, survey responses, preparing data visualization. Pivot longer block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"pivot-wider-block","dir":"Articles","previous_headings":"","what":"Pivot Wider Block","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"pivot wider block reshapes data long wide format using tidyr::pivot_wider(). inverse pivot longer, creating summary table row-column combinations become cells. Select column contains values new column names (names_from) column contains cell values (values_from). id_cols parameter specifies columns identify row. empty, columns names_from values_from used identifiers. names_prefix option adds prefix new column names. values_fill parameter provides value missing combinations (e.g., “0” leave NA). useful creating crosstabs, pivot tables, comparing values across categories. Pivot wider block interface","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/blockr-dplyr-showcase.html","id":"building-data-pipelines","dir":"Articles","previous_headings":"","what":"Building Data Pipelines","title":"blockr.dplyr Showcase: Data Wrangling Blocks","text":"Blocks work together pipelines. output one block becomes input next. block shows preview data stage.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"Three blocks accept expressions: expression filter, mutate, summarize. Helper functions make expressions powerful applying operations multiple columns . vignette covers: Common functions mutate summarize Helper functions: across(), (), if_any(), if_all(), pick() Column selection helpers Practical examples See also: dplyr column-wise operations dplyr window functions.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"expression-blocks","dir":"Articles","previous_headings":"","what":"Expression Blocks","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"Expression filter block: Logical expressions keep rows Expressions return TRUE/FALSE row Use comparison operators: >, <, ==, !=, >=, <= Combine & () | () Helpers: if_any(), if_all() Mutate block: Create modify columns Perform calculations existing columns Use arithmetic, logs, lags, cumulative functions Helper: across() transform multiple columns Summarize block: Aggregate data Reduce rows summary statistics Use aggregation functions: mean(), sum(), n() Helpers: across() multiple columns, pick() custom functions","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"arithmetic","dir":"Articles","previous_headings":"Useful Functions for Mutate","what":"Arithmetic","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"+, -, *, /, ^ - basic operations %/% - integer division %% - remainder (modulo)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"logs-and-exponentials","dir":"Articles","previous_headings":"Useful Functions for Mutate","what":"Logs and exponentials","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"log(), log2(), log10() - logarithms exp() - exponential sqrt() - square root","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"offsets","dir":"Articles","previous_headings":"Useful Functions for Mutate","what":"Offsets","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"lag() - previous values lead() - next values","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"cumulative-aggregates","dir":"Articles","previous_headings":"Useful Functions for Mutate","what":"Cumulative aggregates","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"cumsum() - cumulative sum cummean() - cumulative mean cummin(), cummax() - cumulative min/max cumprod() - cumulative product","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"ranking","dir":"Articles","previous_headings":"Useful Functions for Mutate","what":"Ranking","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"row_number() - sequential ranks (1, 2, 3, 4) min_rank() - ranks ties (1, 2, 2, 4) dense_rank() - ranks without gaps (1, 2, 2, 3) percent_rank() - percentile (0 1) ntile(n) - divide n bins","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"logical-comparisons","dir":"Articles","previous_headings":"Useful Functions for Mutate","what":"Logical comparisons","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"<, >, <=, >=, ==, != & (), | (), ! () %% - test membership","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"examples","dir":"Articles","previous_headings":"Useful Functions for Mutate","what":"Examples","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"See dplyr window functions .","code":"# Calculate percentage across(c(hp, wt), \\(x) x / sum(x) * 100)  # Lag differences mpg - lag(mpg)  # Cumulative sums by group (use by parameter) cumsum(sales)  # Rank values min_rank(desc(hp))"},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"center","dir":"Articles","previous_headings":"Useful Functions for Summarize","what":"Center","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"mean() - average median() - middle value","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"spread","dir":"Articles","previous_headings":"Useful Functions for Summarize","what":"Spread","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"sd() - standard deviation IQR() - interquartile range mad() - median absolute deviation","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"range","dir":"Articles","previous_headings":"Useful Functions for Summarize","what":"Range","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"min(), max() - minimum maximum quantile(x, 0.25) - percentiles","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"position","dir":"Articles","previous_headings":"Useful Functions for Summarize","what":"Position","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"first(), last(), nth(x, 2) - positional values","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"count","dir":"Articles","previous_headings":"Useful Functions for Summarize","what":"Count","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"n() - count rows n_distinct() - count unique values sum(!.na(x)) - count non-missing","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"sums-and-products","dir":"Articles","previous_headings":"Useful Functions for Summarize","what":"Sums and products","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"sum() - total prod() - product","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"examples-1","dir":"Articles","previous_headings":"Useful Functions for Summarize","what":"Examples","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"handling missing values, add na.rm = TRUE: See dplyr summarise .","code":"# Basic statistics across(where(is.numeric), list(mean = mean, sd = sd))  # Count by group (use by parameter) n()  # Multiple stats list(   avg = mean(hp),   min = min(hp),   max = max(hp),   count = n() ) mean(hp, na.rm = TRUE) across(where(is.numeric), \\(x) mean(x, na.rm = TRUE))"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"column-selection-helpers","dir":"Articles","previous_headings":"","what":"Column Selection Helpers","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"Select columns name pattern type (used inside across(), if_any(), if_all()): everything() - columns starts_with(\"prefix\") - columns starting prefix ends_with(\"suffix\") - columns ending suffix contains(\"text\") - columns containing text (.numeric) - columns type (.character, .factor) c(col1, col2) - specific columns Combine selections:","code":"c(starts_with(\"Sepal\"), ends_with(\"Width\")) where(is.numeric) & starts_with(\"x\")"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"the-across-function","dir":"Articles","previous_headings":"","what":"The across() Function","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"Apply operation multiple columns. Syntax: across(.cols, .fns, .names = NULL) .cols - columns (use selection helpers) .fns - function(s) apply .names - control output names (default: {.col}_{.fn})","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"in-mutate-block","dir":"Articles","previous_headings":"The across() Function","what":"In Mutate Block","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"Transform multiple columns: Use \\(x) create anonymous functions x represents current column.","code":"# Round all numeric columns across(where(is.numeric), round)  # Scale to 0-1 range across(c(mpg, hp, wt), \\(x) x / max(x))  # Log transform with custom names across(where(is.numeric), \\(x) log(x + 1), .names = \"log_{.col}\")"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"in-summarize-block","dir":"Articles","previous_headings":"The across() Function","what":"In Summarize Block","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"Calculate statistics multiple columns:","code":"# Mean of all numeric columns across(where(is.numeric), mean)  # Multiple functions across(c(hp, wt), list(mean = mean, sd = sd))  # With grouping (use by parameter) across(everything(), n_distinct)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"custom-names","dir":"Articles","previous_headings":"The across() Function","what":"Custom names","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"","code":"# Default: col_fn across(c(mpg, hp), list(mean = mean, sd = sd)) # Result: mpg_mean, mpg_sd, hp_mean, hp_sd  # Custom: fn.col across(c(mpg, hp), list(mean = mean, sd = sd), .names = \"{.fn}.{.col}\") # Result: mean.mpg, sd.mpg, mean.hp, sd.hp"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"the-pick-function","dir":"Articles","previous_headings":"","what":"The pick() Function","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"Select columns data frame custom functions. Syntax: pick(.cols) Use summarize block custom functions need data frame:","code":"# With custom function calc_stats(pick(everything()))  # Select specific columns my_function(pick(c(hp, wt, mpg)))"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"relationship-to-unpack-parameter","dir":"Articles","previous_headings":"The pick() Function","what":"Relationship to unpack parameter","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"expression returns data frame, use unpack option: unpack = FALSE (default): Result single list-column unpack = TRUE: Columns spread separate columns Example:","code":"# Custom function that returns data frame calc_stats <- function(df) {   data.frame(mean_x = mean(df$x), sd_x = sd(df$x)) }  # In summarize block with unpack = TRUE: calc_stats(pick(everything())) # Result: mean_x and sd_x as separate columns"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"filter-helpers-if_any-and-if_all","dir":"Articles","previous_headings":"","what":"Filter Helpers: if_any() and if_all()","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"Check conditions across multiple columns expression filter block. if_any(): TRUE condition true least one column if_all(): TRUE condition true columns","code":"# Rows with any NA if_any(everything(), is.na)  # Any numeric column > 100 if_any(where(is.numeric), \\(x) x > 100)  # Search across text columns if_any(where(is.character), \\(x) x == \"setosa\") # All numeric columns positive if_all(where(is.numeric), \\(x) x > 0)  # All width measurements > 2 if_all(ends_with(\"Width\"), \\(x) x > 2)  # No missing values if_all(everything(), \\(x) !is.na(x))"},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"mutate-block","dir":"Articles","previous_headings":"Common Patterns","what":"Mutate Block","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"","code":"# Round numeric columns across(where(is.numeric), round)  # Scale to max across(c(mpg, hp, wt), \\(x) x / max(x))  # Uppercase text across(where(is.character), toupper)  # Log transform across(where(is.numeric), \\(x) log(x + 1), .names = \"log_{.col}\")"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"summarize-block","dir":"Articles","previous_headings":"Common Patterns","what":"Summarize Block","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"","code":"# Means (add grouping with by parameter) across(where(is.numeric), mean)  # Multiple statistics across(c(hp, wt), list(mean = mean, sd = sd, min = min, max = max))  # Count non-missing across(everything(), \\(x) sum(!is.na(x)))"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"expression-filter-block","dir":"Articles","previous_headings":"Common Patterns","what":"Expression Filter Block","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"","code":"# Complete rows only if_all(everything(), \\(x) !is.na(x))  # Any negative if_any(where(is.numeric), \\(x) x < 0)  # All widths > threshold if_all(ends_with(\"Width\"), \\(x) x > 2.5)  # Search text columns if_any(where(is.character), \\(x) grepl(\"pattern\", x))"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"tips","dir":"Articles","previous_headings":"","what":"Tips","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"Start simple: Test one column, use across() Check preview: Verify results block preview Unpack option: summarize, enable unpack expressions return data frames Combine helpers: Use & | combine selections Function syntax: Direct: round (arguments needed) Anonymous function: \\(x) round(x, 2) (arguments) x represents current column Missing values: Add na.rm = TRUE aggregation functions","code":"across(where(is.numeric) & starts_with(\"Sepal\"), mean) across(where(is.numeric), \\(x) mean(x, na.rm = TRUE))"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/articles/expression-helpers.html","id":"learn-more","dir":"Articles","previous_headings":"","what":"Learn More","title":"Working with Expressions: Helper Functions for Advanced Data Manipulation","text":"comprehensive documentation column-wise operations, see: Column-wise operations vignette - detailed guide across(), (), if_any(), if_all() across() reference - complete documentation arguments options R Data Science (2e) - comprehensive tutorial data transformation resources provide additional examples, edge cases, advanced techniques working expressions dplyr.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christoph Sax. Author, maintainer. Nicolas Bennett. Author. David Granjon. Author. Mike Page. Author.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sax C, Bennett N, Granjon D, Page M (2025). blockr.dplyr: Interactive 'dplyr' Data Transformation Blocks. R package version 0.1.0, https://bristolmyerssquibb.github.io/blockr.dplyr/.","code":"@Manual{,   title = {blockr.dplyr: Interactive 'dplyr' Data Transformation Blocks},   author = {Christoph Sax and Nicolas Bennett and David Granjon and Mike Page},   year = {2025},   note = {R package version 0.1.0},   url = {https://bristolmyerssquibb.github.io/blockr.dplyr/}, }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/index.html","id":"blockrdplyr","dir":"","previous_headings":"","what":"Interactive dplyr Data Transformation Blocks","title":"Interactive dplyr Data Transformation Blocks","text":"blockr.dplyr provides interactive blocks data transformation. Filter, sort, summarize, join, manipulate data visual interfaces.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Interactive dplyr Data Transformation Blocks","text":"blockr.dplyr part blockr ecosystem. blockr.core provides workflow engine, blockr.ui provides visual interface, blockr.dplyr provides data transformation blocks. three packages work together create interactive data workflows.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Interactive dplyr Data Transformation Blocks","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"BristolMyersSquibb/blockr.dplyr\") devtools::install_github(\"BristolMyersSquibb/blockr.core\") devtools::install_github(\"BristolMyersSquibb/blockr.ui\")"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Interactive dplyr Data Transformation Blocks","text":"Create launch empty dashboard: opens visual interface web browser. Add blocks using “+” button, connect dragging, configure block settings. Data transformations update real-time build workflow.","code":"library(blockr.core) library(blockr.ui) library(blockr.dplyr) serve(new_dag_board())"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/index.html","id":"available-blocks","dir":"","previous_headings":"","what":"Available Blocks","title":"Interactive dplyr Data Transformation Blocks","text":"blockr.dplyr provides 13 data transformation blocks: select: choose columns keep expression_filter: keep rows meet conditions value_filter: filter selecting values dropdowns arrange: sort rows column values slice: select specific rows position value mutate: create modify columns rename: change column names summarize: calculate statistics, optionally groups join: combine two datasets based common columns pivot_longer: reshape data wide long format pivot_wider: reshape data long wide format bind_rows: stack datasets vertically bind_cols: combine datasets side--side See vignette(\"blockr-dplyr-showcase\") complete showcase screenshots detailed explanations block.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn More","title":"Interactive dplyr Data Transformation Blocks","text":"blockr.dplyr website includes full documentation showcase vignette. information broader blockr ecosystem, see blockr.core blockr.ui.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/blockr.dplyr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"blockr.dplyr: Interactive 'dplyr' Data Transformation Blocks — blockr.dplyr-package","title":"blockr.dplyr: Interactive 'dplyr' Data Transformation Blocks — blockr.dplyr-package","text":"Extends 'blockr.core' interactive blocks visual data wrangling using 'dplyr' 'tidyr' operations. Users can build data transformation pipelines graphical interface without writing code directly. Includes blocks filtering, selecting, mutating, summarizing, joining, arranging data, support complex expressions, grouping operations, real-time validation.","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/blockr.dplyr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"blockr.dplyr: Interactive 'dplyr' Data Transformation Blocks — blockr.dplyr-package","text":"Maintainer: Christoph Sax christoph@cynkra.com (ORCID) Authors: Nicolas Bennett nicolas@cynkra.com David Granjon david@cynkra.com Mike Page mike@cynkra.com","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/css-utilities.html","id":null,"dir":"Reference","previous_headings":"","what":"CSS Utilities for blockr.dplyr Blocks — css-utilities","title":"CSS Utilities for blockr.dplyr Blocks — css-utilities","text":"file provides centralized CSS functions consistent block styling. custom classes use .block- prefix distinguish framework classes (Bootstrap, Shiny, etc.) prevent naming conflicts.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/css-utilities.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CSS Utilities for blockr.dplyr Blocks — css-utilities","text":"Required blocks: css_responsive_grid() - Base grid layout block styling (REQUIRED) Common optional utilities: css_single_column() - Force single-column layout (common) css_advanced_toggle() - Collapsible sections toggle (optional) css_inline_checkbox() - Checkbox/label styling inline layouts (optional) Usage block UI:   Block-specific styling (unique one block) use tags$style(HTML(...)) directly block file, added . add CSS reused 2+ blocks.","code":"ui = function(id) {   tagList(     css_responsive_grid(),        # Always include first     css_single_column(\"myblock\"), # If single column layout needed     css_inline_checkbox(),        # If using inline checkboxes     # ... block-specific CSS with tags$style(HTML(...)) ...     # ... block HTML structure ...   ) }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/keep.html","id":null,"dir":"Reference","previous_headings":"","what":"Keep function for filtering lists — keep","title":"Keep function for filtering lists — keep","text":"Keep function filtering lists","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/keep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keep function for filtering lists — keep","text":"","code":"keep(x, .p)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/map.html","id":null,"dir":"Reference","previous_headings":"","what":"Map function for applying functions to lists — map","title":"Map function for applying functions to lists — map","text":"Map function applying functions lists","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map function for applying functions to lists — map","text":"","code":"map(x, .f)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/map_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Map character function — map_chr","title":"Map character function — map_chr","text":"Map character function","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/map_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map character function — map_chr","text":"","code":"map_chr(x, .f)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_by_selector_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Group By Column Selector Server Module — mod_by_selector_server","title":"Group By Column Selector Server Module — mod_by_selector_server","text":"Group Column Selector Server Module","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_by_selector_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group By Column Selector Server Module — mod_by_selector_server","text":"","code":"mod_by_selector_server(id, get_cols, initial_value = character())"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_by_selector_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group By Column Selector Server Module — mod_by_selector_server","text":"id Character string. Module ID. get_cols Reactive function returns available column names. initial_value Character vector. Initial selected columns.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_by_selector_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Unified Group By Column Selector Module — mod_by_selector_ui","title":"Unified Group By Column Selector Module — mod_by_selector_ui","text":"reusable Shiny module selecting group columns across blocks support .parameter dplyr operations.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_by_selector_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unified Group By Column Selector Module — mod_by_selector_ui","text":"","code":"mod_by_selector_ui(   id,   label = \"Group by columns (optional)\",   initial_choices = character(),   initial_selected = character() )"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_by_selector_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unified Group By Column Selector Module — mod_by_selector_ui","text":"id Character string. Module ID. label Character string. Label selector. Default: \"Group columns (optional)\" initial_choices Character vector. Initial choices selector. initial_selected Character vector. Initial selected values.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_by_selector_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unified Group By Column Selector Module — mod_by_selector_ui","text":"UI function, returns shiny tag. server function, returns reactive containing selected column names.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_join_keys_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Join Keys Server Module — mod_join_keys_server","title":"Join Keys Server Module — mod_join_keys_server","text":"Join Keys Server Module","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_join_keys_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join Keys Server Module — mod_join_keys_server","text":"","code":"mod_join_keys_server(id, get_x_cols, get_y_cols, initial_keys = character())"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_join_keys_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join Keys Server Module — mod_join_keys_server","text":"id Character string. Module ID. get_x_cols Reactive function returns column names first dataset. get_y_cols Reactive function returns column names second dataset. initial_keys List character vector. Initial join keys.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_join_keys_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Join Keys Mapping Module — mod_join_keys_ui","title":"Join Keys Mapping Module — mod_join_keys_ui","text":"reusable Shiny module configuring join keys two data frames. Supports -name joins (natural joins) different-name joins multi-column capability.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_join_keys_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join Keys Mapping Module — mod_join_keys_ui","text":"","code":"mod_join_keys_ui(id, label = \"Join Keys\")"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_join_keys_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join Keys Mapping Module — mod_join_keys_ui","text":"id Character string. Module ID. label Character string. Label join keys section.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_join_keys_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Join Keys Mapping Module — mod_join_keys_ui","text":"UI function, returns shiny tag. server function, returns reactive containing join key specifications.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_arrange_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi arrange module for multiple column sorting — mod_multi_arrange_server","title":"Multi arrange module for multiple column sorting — mod_multi_arrange_server","text":"Shiny module manages multiple column sorting individual ASC/DESC controls. Supports adding, removing, reordering sort columns dynamically.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_arrange_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi arrange module for multiple column sorting — mod_multi_arrange_server","text":"","code":"mod_multi_arrange_server(id, get_value, get_cols)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_arrange_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi arrange module for multiple column sorting — mod_multi_arrange_server","text":"id module ID get_value Function returns initial values list (column, direction) pairs get_cols Function returns column names dropdown selection","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_arrange_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi arrange module for multiple column sorting — mod_multi_arrange_server","text":"reactive expression containing current arrange configuration","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_arrange_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create multi arrange UI module — mod_multi_arrange_ui","title":"Create multi arrange UI module — mod_multi_arrange_ui","text":"Create multi arrange UI module","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_arrange_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create multi arrange UI module — mod_multi_arrange_ui","text":"","code":"mod_multi_arrange_ui(id)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_arrange_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create multi arrange UI module — mod_multi_arrange_ui","text":"id module ID","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_arrange_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create multi arrange UI module — mod_multi_arrange_ui","text":"div containing UI elements","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_filter_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi filter condition module for multiple filter expressions — mod_multi_filter_server","title":"Multi filter condition module for multiple filter expressions — mod_multi_filter_server","text":"Shiny module manages multiple filter conditions /logic. Supports adding removing conditions dynamically.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_filter_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi filter condition module for multiple filter expressions — mod_multi_filter_server","text":"","code":"mod_multi_filter_server(id, get_value, get_cols)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_filter_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi filter condition module for multiple filter expressions — mod_multi_filter_server","text":"id module ID get_value Function returns initial values character vector list get_cols Function returns column names autocompletion","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_filter_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi filter condition module for multiple filter expressions — mod_multi_filter_server","text":"reactive expression containing current filter conditions","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_filter_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create multi filter UI module — mod_multi_filter_ui","title":"Create multi filter UI module — mod_multi_filter_ui","text":"Create multi filter UI module","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_filter_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create multi filter UI module — mod_multi_filter_ui","text":"","code":"mod_multi_filter_ui(id, extra_button = NULL)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_filter_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create multi filter UI module — mod_multi_filter_ui","text":"id module ID extra_button Optional extra button (e.g., submit button) place next Add button","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_filter_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create multi filter UI module — mod_multi_filter_ui","text":"div containing UI elements","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_kvexpr_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi key-value expression module for multiple expressions — mod_multi_kvexpr_server","title":"Multi key-value expression module for multiple expressions — mod_multi_kvexpr_server","text":"Shiny module manages multiple key-value pairs expressions. Supports adding removing expressions dynamically.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_kvexpr_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi key-value expression module for multiple expressions — mod_multi_kvexpr_server","text":"","code":"mod_multi_kvexpr_server(id, get_value, get_cols)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_kvexpr_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi key-value expression module for multiple expressions — mod_multi_kvexpr_server","text":"id module ID get_value Function returns initial values named list/vector get_cols Function returns column names autocompletion","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_kvexpr_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi key-value expression module for multiple expressions — mod_multi_kvexpr_server","text":"reactive expression containing current key-value pairs","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_kvexpr_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create multi key-value UI module — mod_multi_kvexpr_ui","title":"Create multi key-value UI module — mod_multi_kvexpr_ui","text":"Create multi key-value UI module","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_kvexpr_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create multi key-value UI module — mod_multi_kvexpr_ui","text":"","code":"mod_multi_kvexpr_ui(id, extra_button = NULL)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_kvexpr_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create multi key-value UI module — mod_multi_kvexpr_ui","text":"id module ID extra_button Optional UI element (e.g., submit button) display right side","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_kvexpr_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create multi key-value UI module — mod_multi_kvexpr_ui","text":"div containing UI elements","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_rename_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi rename module for multiple column renames — mod_multi_rename_server","title":"Multi rename module for multiple column renames — mod_multi_rename_server","text":"Shiny module manages multiple old_name -> new_name mappings column renaming. Supports adding removing rename pairs dynamically.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_rename_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi rename module for multiple column renames — mod_multi_rename_server","text":"","code":"mod_multi_rename_server(id, get_value, get_cols)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_rename_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi rename module for multiple column renames — mod_multi_rename_server","text":"id module ID get_value Function returns initial values named list/vector get_cols Function returns column names dropdown selection","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_rename_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi rename module for multiple column renames — mod_multi_rename_server","text":"reactive expression containing current rename pairs","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_rename_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create multi rename UI module — mod_multi_rename_ui","title":"Create multi rename UI module — mod_multi_rename_ui","text":"Create multi rename UI module","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_rename_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create multi rename UI module — mod_multi_rename_ui","text":"","code":"mod_multi_rename_ui(id, extra_button = NULL)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_rename_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create multi rename UI module — mod_multi_rename_ui","text":"id module ID extra_button Optional UI element (e.g., submit button) display right side","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_multi_rename_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create multi rename UI module — mod_multi_rename_ui","text":"div containing UI elements","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_value_filter_server.html","id":null,"dir":"Reference","previous_headings":"","what":"Value filter condition module for selecting values from columns — mod_value_filter_server","title":"Value filter condition module for selecting values from columns — mod_value_filter_server","text":"Shiny module manages value-based filter conditions. Users can select columns choose specific discrete values include exclude without writing R expressions. Works numeric categorical columns using multi-select inputs. Supports multiple conditions /logic.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_value_filter_server.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value filter condition module for selecting values from columns — mod_value_filter_server","text":"","code":"mod_value_filter_server(id, get_value, get_data, preserve_order = FALSE)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_value_filter_server.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value filter condition module for selecting values from columns — mod_value_filter_server","text":"id module ID get_value Function returns initial conditions list get_data Function returns data frame extracting unique values preserve_order Logical. TRUE, preserves order selected values","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_value_filter_server.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value filter condition module for selecting values from columns — mod_value_filter_server","text":"list reactive expressions conditions preserve_order","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_value_filter_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create value filter UI module — mod_value_filter_ui","title":"Create value filter UI module — mod_value_filter_ui","text":"Create value filter UI module","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_value_filter_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create value filter UI module — mod_value_filter_ui","text":"","code":"mod_value_filter_ui(id)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_value_filter_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create value filter UI module — mod_value_filter_ui","text":"id module ID","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/mod_value_filter_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create value filter UI module — mod_value_filter_ui","text":"div containing UI elements","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_arrange_row_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create UI for a single arrange row — multi_arrange_row_ui","title":"Create UI for a single arrange row — multi_arrange_row_ui","text":"Create UI single arrange row","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_arrange_row_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create UI for a single arrange row — multi_arrange_row_ui","text":"","code":"multi_arrange_row_ui(   id,   column = \"\",   direction = \"asc\",   available_cols = character(),   position = 1,   show_remove = TRUE )"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_arrange_row_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create UI for a single arrange row — multi_arrange_row_ui","text":"id Row identifier column Column name sort direction Sort direction (\"asc\" \"desc\") available_cols Available column names dropdown position Position sort order (1, 2, 3, ...) show_remove Whether show remove button","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_arrange_row_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create UI for a single arrange row — multi_arrange_row_ui","text":"div containing row UI","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_filter_condition_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create UI for a single filter condition row — multi_filter_condition_ui","title":"Create UI for a single filter condition row — multi_filter_condition_ui","text":"Create UI single filter condition row","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_filter_condition_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create UI for a single filter condition row — multi_filter_condition_ui","text":"","code":"multi_filter_condition_ui(id, value = \"TRUE\", show_remove = TRUE)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_filter_condition_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create UI for a single filter condition row — multi_filter_condition_ui","text":"id Row identifier value Condition value show_remove Whether show remove button","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_filter_condition_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create UI for a single filter condition row — multi_filter_condition_ui","text":"div containing row UI","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_kvexpr_row_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create UI for a single expression row — multi_kvexpr_row_ui","title":"Create UI for a single expression row — multi_kvexpr_row_ui","text":"Create UI single expression row","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_kvexpr_row_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create UI for a single expression row — multi_kvexpr_row_ui","text":"","code":"multi_kvexpr_row_ui(id, name = \"new_col\", value = \"1\", show_remove = TRUE)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_kvexpr_row_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create UI for a single expression row — multi_kvexpr_row_ui","text":"id Row identifier name Column name value Expression value show_remove Whether show remove button","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_kvexpr_row_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create UI for a single expression row — multi_kvexpr_row_ui","text":"div containing row UI","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_rename_row_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create UI for a single rename pair row — multi_rename_row_ui","title":"Create UI for a single rename pair row — multi_rename_row_ui","text":"Create UI single rename pair row","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_rename_row_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create UI for a single rename pair row — multi_rename_row_ui","text":"","code":"multi_rename_row_ui(   id,   new_name = \"new_col\",   old_name = \"\",   available_cols = character(),   show_remove = TRUE )"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_rename_row_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create UI for a single rename pair row — multi_rename_row_ui","text":"id Row identifier new_name New column name old_name Old column name available_cols Available column names dropdown show_remove Whether show remove button","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/multi_rename_row_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create UI for a single rename pair row — multi_rename_row_ui","text":"div containing row UI","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_arrange_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange block constructor — new_arrange_block","title":"Arrange block constructor — new_arrange_block","text":"block allows allows order rows data frame values selected columns (see dplyr::arrange()).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_arrange_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange block constructor — new_arrange_block","text":"","code":"new_arrange_block(columns = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_arrange_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange block constructor — new_arrange_block","text":"columns Columns arrange . Can character vector (ascending order) list specifications column direction. ... Forwarded blockr.core::new_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_bind_cols_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind Columns Block Constructor — new_bind_cols_block","title":"Bind Columns Block Constructor — new_bind_cols_block","text":"block allows column-wise combination two data frames using dplyr::bind_cols(). combines data frames side--side, requiring number rows. Duplicate column names automatically handled dplyr.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_bind_cols_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind Columns Block Constructor — new_bind_cols_block","text":"","code":"new_bind_cols_block(...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_bind_cols_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind Columns Block Constructor — new_bind_cols_block","text":"... Forwarded blockr.core::new_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_bind_cols_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind Columns Block Constructor — new_bind_cols_block","text":"block object bind_cols operations","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_bind_rows_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind Rows Block Constructor — new_bind_rows_block","title":"Bind Rows Block Constructor — new_bind_rows_block","text":"block allows row-wise combination two data frames using dplyr::bind_rows(). stacks data frames vertically, matching columns name filling missing columns NA values.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_bind_rows_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind Rows Block Constructor — new_bind_rows_block","text":"","code":"new_bind_rows_block(id_name = \"\", ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_bind_rows_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind Rows Block Constructor — new_bind_rows_block","text":"id_name Character string, name ID column. non-empty, adds column identifying source data frames. Default \"\" (disabled). ... Forwarded blockr.core::new_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_bind_rows_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind Rows Block Constructor — new_bind_rows_block","text":"block object bind_rows operations","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_filter_expr_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Expression filter block constructor — new_filter_expr_block","title":"Expression filter block constructor — new_filter_expr_block","text":"block allows filtering rows data frame based R expressions (see dplyr::filter()). Supports multiple conditions /logic. Changes applied clicking submit button.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_filter_expr_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expression filter block constructor — new_filter_expr_block","text":"","code":"new_filter_expr_block(exprs = \"TRUE\", ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_filter_expr_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expression filter block constructor — new_filter_expr_block","text":"exprs Reactive expression returning character vector filter conditions (default: \"TRUE\" filtering) ... Additional arguments forwarded blockr.core::new_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_filter_expr_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expression filter block constructor — new_filter_expr_block","text":"block object expression-based filter operations","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_filter_expr_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expression filter block constructor — new_filter_expr_block","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with mtcars dataset library(blockr.core) serve(new_filter_expr_block(), list(data = mtcars))  # With custom initial condition serve(new_filter_expr_block(\"mpg > 20\"), list(data = mtcars))  # Connected blocks example serve(   new_board(     blocks = list(       a = new_dataset_block(),       b = new_filter_expr_block()     ),     links = links(       from = c(\"a\"),       to = c(\"b\")     )   ) ) } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_join_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Join block constructor — new_join_block","title":"Join block constructor — new_join_block","text":"block allows joining two data.frame objects advanced multi-column support including -name different-name joins (see dplyr::left_join(), dplyr::inner_join(), etc.).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_join_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Join block constructor — new_join_block","text":"","code":"new_join_block(type = character(), by = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_join_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Join block constructor — new_join_block","text":"type Join type (left_join, inner_join, right_join, full_join, semi_join, anti_join) Column(s) join - can character vector -name joins named list different-name joins ... Forwarded blockr.core::new_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_mutate_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Mutate block constructor — new_mutate_block","title":"Mutate block constructor — new_mutate_block","text":"block allows add new variables preserve existing ones (see dplyr::mutate()). Changes applied clicking submit button.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_mutate_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mutate block constructor — new_mutate_block","text":"","code":"new_mutate_block(exprs = list(new_col = \"1\"), by = character(), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_mutate_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mutate block constructor — new_mutate_block","text":"exprs Reactive expression returning character vector expressions Character vector column names grouping. Default empty. ... Additional arguments forwarded blockr.core::new_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_mutate_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mutate block constructor — new_mutate_block","text":"block object mutate operations","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_mutate_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mutate block constructor — new_mutate_block","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with mtcars datase library(blockr.core) serve(new_mutate_block(), data = list(data = mtcars))  # With a custom datase df <- tibble::tibble(x = 1:5, `2025 Sales` = letters[1:5], .name_repair = \"minimal\") serve(new_mutate_block(), data = list(data = df)) } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_pivot_longer_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot Longer block constructor — new_pivot_longer_block","title":"Pivot Longer block constructor — new_pivot_longer_block","text":"block reshapes data wide long format pivoting multiple columns two columns: one containing original column names another containing values (see tidyr::pivot_longer()).","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_pivot_longer_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot Longer block constructor — new_pivot_longer_block","text":"","code":"new_pivot_longer_block(   cols = character(),   names_to = \"name\",   values_to = \"value\",   values_drop_na = FALSE,   names_prefix = \"\",   ... )"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_pivot_longer_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot Longer block constructor — new_pivot_longer_block","text":"cols Character vector column names pivot longer format. empty, columns available selection. names_to Name new column create column names. Default \"name\". values_to Name new column create values. Default \"value\". values_drop_na TRUE, rows NA values dropped. Default FALSE. names_prefix Optional prefix remove column names storing names_to column. example, \"col_\" remove prefix column names like \"col_a\", \"col_b\". ... Additional arguments forwarded blockr.core::new_transform_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_pivot_longer_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot Longer block constructor — new_pivot_longer_block","text":"block object pivot_longer operations","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_pivot_longer_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot Longer block constructor — new_pivot_longer_block","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with wide format data library(blockr.core) wide_data <- data.frame(   id = 1:3,   measurement_a = c(10, 20, 30),   measurement_b = c(15, 25, 35),   measurement_c = c(12, 22, 32) ) serve(   new_pivot_longer_block(     cols = c(\"measurement_a\", \"measurement_b\", \"measurement_c\"),     names_to = \"measurement_type\",     values_to = \"value\"   ),   data = list(data = wide_data) )  # With names_prefix to clean column names serve(   new_pivot_longer_block(     cols = c(\"measurement_a\", \"measurement_b\", \"measurement_c\"),     names_to = \"type\",     values_to = \"measurement\",     names_prefix = \"measurement_\"   ),   data = list(data = wide_data) ) } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_pivot_wider_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Pivot Wider block constructor — new_pivot_wider_block","title":"Pivot Wider block constructor — new_pivot_wider_block","text":"block reshapes data long wide format pivoting column values new columns (see tidyr::pivot_wider()). inverse operation pivot_longer.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_pivot_wider_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pivot Wider block constructor — new_pivot_wider_block","text":"","code":"new_pivot_wider_block(   names_from = character(),   values_from = character(),   id_cols = character(),   values_fill = \"\",   names_sep = \"_\",   names_prefix = \"\",   ... )"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_pivot_wider_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pivot Wider block constructor — new_pivot_wider_block","text":"names_from Character vector specifying column(s) use new column names. Can single column multiple columns. values_from Character vector specifying column(s) use cell values. Can single column multiple columns. id_cols Character vector columns uniquely identify row. empty (default), uses columns specified names_from values_from. values_fill Optional value use missing combinations. Can single value like \"0\" \"NA\". Leave empty keep missing values NA. names_sep Separator use names_from specifies multiple columns. Default \"_\". names_prefix Optional prefix add new column names. ... Additional arguments forwarded blockr.core::new_transform_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_pivot_wider_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pivot Wider block constructor — new_pivot_wider_block","text":"block object pivot_wider operations","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_pivot_wider_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pivot Wider block constructor — new_pivot_wider_block","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with long format data library(blockr.core) long_data <- data.frame(   id = rep(1:3, each = 3),   measurement_type = rep(c(\"a\", \"b\", \"c\"), 3),   value = c(10, 15, 12, 20, 25, 22, 30, 35, 32) ) serve(   new_pivot_wider_block(     names_from = \"measurement_type\",     values_from = \"value\"   ),   data = list(data = long_data) )  # With values_fill to replace NAs serve(   new_pivot_wider_block(     names_from = \"measurement_type\",     values_from = \"value\",     values_fill = \"0\"   ),   data = list(data = long_data) )  # With custom names_prefix serve(   new_pivot_wider_block(     names_from = \"measurement_type\",     values_from = \"value\",     names_prefix = \"measure_\"   ),   data = list(data = long_data) ) } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_rename_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename block constructor — new_rename_block","title":"Rename block constructor — new_rename_block","text":"block allows renaming columns data frame using visual interface (see dplyr::rename()). Changes applied clicking submit button. Uses new_name = old_name syntax new_name want call column old_name current column name.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_rename_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename block constructor — new_rename_block","text":"","code":"new_rename_block(renames = list(new_col = character()), ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_rename_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename block constructor — new_rename_block","text":"renames Named list vector renames new_name = old_name format ... Additional arguments forwarded blockr.core::new_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_rename_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename block constructor — new_rename_block","text":"block object rename operations","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_rename_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename block constructor — new_rename_block","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with mtcars dataset library(blockr.core) serve(new_rename_block(), data = list(data = mtcars))  # With predefined renames serve(   new_rename_block(list(miles_per_gallon = \"mpg\", cylinders = \"cyl\")),   data = list(data = mtcars) )  # Connected blocks example serve(   new_board(     blocks = list(       a = new_dataset_block(),       b = new_rename_block(list(horsepower = \"hp\"))     ),     links = links(       from = c(\"a\"),       to = c(\"b\")     )   ) ) } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_select_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Select block constructor — new_select_block","title":"Select block constructor — new_select_block","text":"block allows performing column subsetting data.frame objects (see dplyr::select()). Columns can selected reordered dragging, exclude mode allows negative selection using dplyr's minus syntax. Optionally, distinct rows can kept selection.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_select_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Select block constructor — new_select_block","text":"","code":"new_select_block(columns = character(), exclude = FALSE, distinct = FALSE, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_select_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Select block constructor — new_select_block","text":"columns Selected columns (character vector). empty, selects columns. exclude Logical. TRUE, uses exclude mode (dplyr minus syntax: -c(col1, col2)). FALSE (default), uses include mode (selects specified columns). distinct Logical. TRUE, keeps distinct/unique rows selecting columns. FALSE (default), returns rows. replaces old new_distinct_block() functionality. ... Forwarded blockr.core::new_transform_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_select_block.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Select block constructor — new_select_block","text":"Note: block replaces deprecated new_distinct_block(). Use distinct parameter get unique rows column selection. select block provides sortable multi-select interface columns can : Selected/deselected clicking Reordered dragging (order preserved output) Removed individually using × button Include mode (exclude = FALSE, default): Selected columns included output Empty selection = select (select(data, dplyr::everything())) Exclude mode (exclude = TRUE): Selected columns excluded output using minus syntax Empty selection = select (select(data)) Efficient large datasets want remove just columns Distinct mode (distinct = TRUE): Keeps distinct rows column selection Equivalent piping select() output distinct() Useful finding unique combinations selected columns","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_select_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Select block constructor — new_select_block","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with mtcars dataset library(blockr.core) serve(new_select_block(), list(data = mtcars))  # With initial column selection serve(new_select_block(columns = c(\"mpg\", \"cyl\", \"hp\")), list(data = mtcars))  # Exclude mode (select all except specified columns) serve(new_select_block(columns = c(\"gear\", \"carb\"), exclude = TRUE), list(data = mtcars))  # Select with distinct (unique combinations) serve(new_select_block(columns = c(\"cyl\", \"gear\"), distinct = TRUE), list(data = mtcars))  # Full deduplication (distinct on all columns) serve(new_select_block(distinct = TRUE), list(data = mtcars))  # Connected blocks example serve(   new_board(     blocks = list(       a = new_dataset_block(),       b = new_select_block()     ),     links = links(       from = c(\"a\"),       to = c(\"b\")     )   ) ) } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_slice_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Slice block constructor — new_slice_block","title":"Slice block constructor — new_slice_block","text":"block allows row selection using various dplyr slice functions (see dplyr::slice(), dplyr::slice_head(), dplyr::slice_tail(), dplyr::slice_min(), dplyr::slice_max(), dplyr::slice_sample()). Features reactive UI immediate updates comprehensive grouping support.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_slice_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Slice block constructor — new_slice_block","text":"","code":"new_slice_block(   type = \"head\",   n = 5,   prop = NULL,   order_by = character(),   with_ties = TRUE,   weight_by = character(),   replace = FALSE,   rows = \"1:5\",   by = character(),   ... )"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_slice_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Slice block constructor — new_slice_block","text":"type Character string specifying slice type: \"head\", \"tail\", \"min\", \"max\", \"sample\", \"custom\" n Number rows select (default: 5). Mutually exclusive prop. prop Proportion rows select (0 1, default: NULL). specified, n ignored. order_by Column name order (slice_min/slice_max) with_ties Logical, whether include ties (slice_min/slice_max) weight_by Column name weighted sampling (slice_sample) replace Logical, whether sample replacement (slice_sample) rows Custom row positions (slice) Character vector column names grouping ... Additional arguments forwarded blockr.core::new_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_slice_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Slice block constructor — new_slice_block","text":"block object slice operations","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_slice_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Slice block constructor — new_slice_block","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage library(blockr.core) serve(new_slice_block(), list(data = mtcars))  # Select first 5 rows serve(new_slice_block(type = \"head\", n = 5), list(data = mtcars))  # Select rows with highest mpg values serve(new_slice_block(type = \"max\", order_by = \"mpg\", n = 3), list(data = mtcars))  # Random sampling serve(new_slice_block(type = \"sample\", n = 10, replace = FALSE), list(data = mtcars)) } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_summarize_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize block constructor — new_summarize_block","title":"Summarize block constructor — new_summarize_block","text":"block allows add new variables summarizing groups (see dplyr::summarize()). Changes applied clicking submit button.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_summarize_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize block constructor — new_summarize_block","text":"","code":"new_summarize_block(   exprs = list(count = \"dplyr::n()\"),   by = character(),   unpack = FALSE,   ... )"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_summarize_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize block constructor — new_summarize_block","text":"exprs Reactive expression returning character vector expressions Columns define grouping unpack Logical flag unpack data frame columns helper functions. TRUE, expressions return data frames columns unpacked separate columns. FALSE, data frames kept nested list-columns. Default FALSE. ... Additional arguments forwarded blockr.core::new_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_summarize_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize block constructor — new_summarize_block","text":"block object summarize operations","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_summarize_block.html","id":"unpacking-helper-function-results","dir":"Reference","previous_headings":"","what":"Unpacking Helper Function Results","title":"Summarize block constructor — new_summarize_block","text":"unpack = TRUE, helper functions return data frames columns unpacked separate columns result. useful helper functions like stat_label() return multiple statistics columns.","code":"# Without unpacking (default) new_summarize_block(   exprs = list(stats = \"helper_func(...)\"),   unpack = FALSE ) # Result: Creates nested list-column \"stats\" containing the data frame  # With unpacking new_summarize_block(   exprs = list(stats = \"helper_func(...)\"),   unpack = TRUE ) # Result: Columns from helper_func() are unpacked into separate columns"},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_summarize_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize block constructor — new_summarize_block","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with mtcars dataset library(blockr.core) serve(new_summarize_block(), list(data = mtcars))  # With a custom dataset df <- data.frame(x = 1:5, y = letters[1:5]) serve(new_summarize_block(), list(data = df))  # Using unpack to expand helper function results # Define the helper in your environment first calc_stats <- function(df) {   data.frame(     mean_x = mean(df$x),     mean_y = mean(df$y),     sum_x = sum(df$x),     sum_y = sum(df$y)   ) }  # With unpacking enabled serve(   new_summarize_block(     exprs = list(stats = \"calc_stats(pick(everything()))\"),     by = \"group\",     unpack = TRUE   ),   list(data = data.frame(x = 1:6, y = 10:15, group = rep(c(\"A\", \"B\"), 3))) ) # Result: group, mean_x, mean_y, sum_x, sum_y (columns unpacked) } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_value_filter_block.html","id":null,"dir":"Reference","previous_headings":"","what":"Value Filter block constructor — new_value_filter_block","title":"Value Filter block constructor — new_value_filter_block","text":"block allows filtering rows data frame selecting specific values columns (see dplyr::filter()). Provides visual interface users can select columns choose values include exclude without writing R expressions. Supports multiple conditions /logic.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_value_filter_block.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Value Filter block constructor — new_value_filter_block","text":"","code":"new_value_filter_block(conditions = list(), preserve_order = FALSE, ...)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_value_filter_block.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Value Filter block constructor — new_value_filter_block","text":"conditions List filter conditions. condition list elements: column (character), values (vector), mode (\"include\" \"exclude\"), optionally operator (\"&\" \"|\") specifying condition connects previous one preserve_order Logical. TRUE, preserves order selected values filtered output (default: FALSE) ... Additional arguments forwarded blockr.core::new_block()","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_value_filter_block.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Value Filter block constructor — new_value_filter_block","text":"block object value-based filter operations","code":""},{"path":[]},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/new_value_filter_block.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Value Filter block constructor — new_value_filter_block","text":"","code":"if (FALSE) { # \\dontrun{ # Basic usage with mtcars dataset library(blockr.core) serve(new_value_filter_block(), list(data = mtcars))  # With initial condition serve(new_value_filter_block(   conditions = list(     list(column = \"cyl\", values = c(4, 6), mode = \"include\")   ) ), list(data = mtcars))  # Connected blocks example serve(   new_board(     blocks = list(       a = new_dataset_block(),       b = new_value_filter_block()     ),     links = links(       from = c(\"a\"),       to = c(\"b\")     )   ) ) } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/null-coalescing.html","id":null,"dir":"Reference","previous_headings":"","what":"NULL-coalescing operator — null-coalescing","title":"NULL-coalescing operator — null-coalescing","text":"Returns right-hand side left-hand side NULL, otherwise returns left-hand side.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/null-coalescing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NULL-coalescing operator — null-coalescing","text":"","code":"x %||% y"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/null-coalescing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NULL-coalescing operator — null-coalescing","text":"x Left-hand side value y Right-hand side value","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/null-coalescing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NULL-coalescing operator — null-coalescing","text":"x x NULL, otherwise y","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/parse_value_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse value filter conditions into dplyr expression — parse_value_filter","title":"Parse value filter conditions into dplyr expression — parse_value_filter","text":"Parse value filter conditions dplyr expression","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/parse_value_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse value filter conditions into dplyr expression — parse_value_filter","text":"","code":"parse_value_filter(conditions = list(), preserve_order = FALSE)"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/parse_value_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse value filter conditions into dplyr expression — parse_value_filter","text":"conditions List filter conditions preserve_order Logical. TRUE, preserves order selected values","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/parse_value_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse value filter conditions into dplyr expression — parse_value_filter","text":"parsed expression object","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_ace_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Run example app demonstrating custom autocompletion — run_ace_example","title":"Run example app demonstrating custom autocompletion — run_ace_example","text":"function launches minimal Shiny app demonstrates custom autocompletion functionality simple example.","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_ace_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run example app demonstrating custom autocompletion — run_ace_example","text":"","code":"run_ace_example()"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_ace_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run example app demonstrating custom autocompletion — run_ace_example","text":"","code":"if (FALSE) { # \\dontrun{ pkgload::load_all() run_ace_example() } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_arrange_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Run example app demonstrating multi arrange functionality — run_multi_arrange_example","title":"Run example app demonstrating multi arrange functionality — run_multi_arrange_example","text":"Run example app demonstrating multi arrange functionality","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_arrange_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run example app demonstrating multi arrange functionality — run_multi_arrange_example","text":"","code":"run_multi_arrange_example()"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_arrange_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run example app demonstrating multi arrange functionality — run_multi_arrange_example","text":"","code":"if (FALSE) { # \\dontrun{ run_multi_arrange_example() } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_filter_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Run example app demonstrating multi filter functionality — run_multi_filter_example","title":"Run example app demonstrating multi filter functionality — run_multi_filter_example","text":"Run example app demonstrating multi filter functionality","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_filter_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run example app demonstrating multi filter functionality — run_multi_filter_example","text":"","code":"run_multi_filter_example()"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_filter_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run example app demonstrating multi filter functionality — run_multi_filter_example","text":"","code":"if (FALSE) { # \\dontrun{ run_multi_filter_example() } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_kvexpr_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Run example app demonstrating multi key-value functionality — run_multi_kvexpr_example","title":"Run example app demonstrating multi key-value functionality — run_multi_kvexpr_example","text":"Run example app demonstrating multi key-value functionality","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_kvexpr_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run example app demonstrating multi key-value functionality — run_multi_kvexpr_example","text":"","code":"run_multi_kvexpr_example()"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_kvexpr_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run example app demonstrating multi key-value functionality — run_multi_kvexpr_example","text":"","code":"if (FALSE) { # \\dontrun{ run_multi_kvexpr_example() } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_rename_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Run example app demonstrating multi rename functionality — run_multi_rename_example","title":"Run example app demonstrating multi rename functionality — run_multi_rename_example","text":"Run example app demonstrating multi rename functionality","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_rename_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run example app demonstrating multi rename functionality — run_multi_rename_example","text":"","code":"run_multi_rename_example()"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_multi_rename_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run example app demonstrating multi rename functionality — run_multi_rename_example","text":"","code":"if (FALSE) { # \\dontrun{ run_multi_rename_example() } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_value_filter_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Run example app demonstrating value filter functionality — run_value_filter_example","title":"Run example app demonstrating value filter functionality — run_value_filter_example","text":"Run example app demonstrating value filter functionality","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_value_filter_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run example app demonstrating value filter functionality — run_value_filter_example","text":"","code":"run_value_filter_example()"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/run_value_filter_example.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run example app demonstrating value filter functionality — run_value_filter_example","text":"","code":"if (FALSE) { # \\dontrun{ run_value_filter_example() } # }"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/value_filter_condition_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"Create UI for a single value filter condition row — value_filter_condition_ui","title":"Create UI for a single value filter condition row — value_filter_condition_ui","text":"Create UI single value filter condition row","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/value_filter_condition_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create UI for a single value filter condition row — value_filter_condition_ui","text":"","code":"value_filter_condition_ui(   id,   column = NULL,   values = character(0),   mode = \"include\",   available_columns = character(0),   get_unique_values = function(col) character(0),   show_remove = TRUE,   ns = function(x) x )"},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/value_filter_condition_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create UI for a single value filter condition row — value_filter_condition_ui","text":"id Row identifier column Selected column name values Selected values mode Include exclude mode available_columns Available column choices get_unique_values Function get unique values column show_remove Whether show remove button ns Namespace function (unused, kept compatibility)","code":""},{"path":"https://bristolmyerssquibb.github.io/blockr.dplyr/reference/value_filter_condition_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create UI for a single value filter condition row — value_filter_condition_ui","text":"div containing row UI","code":""}]
